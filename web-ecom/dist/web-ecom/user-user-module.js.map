{"version":3,"sources":["./src/app/user/login/login.component.ts","./src/app/user/login/login.component.html","./src/app/user/user.module.ts","./src/app/user/matchPassword.ts","./src/app/user/password.pattern.ts","./src/app/user/customValidation.ts","./src/app/user/route/route.module.ts","./src/app/user/registration/register.component.ts","./src/app/user/registration/register.component.html"],"names":[],"mappings":"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","file":"user-user-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core'\r\nimport { Router } from \"@angular/router\"\r\nimport {HttpClient} from \"@angular/common/http\"\r\nimport {RegistrationService} from \"../registration.service\"\r\nimport { IUSER } from '../user.model'\r\nimport { AuthService } from \"../auth.service\"\r\nimport { NgForm } from '@angular/forms'\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    user = new IUSER();\r\n    msg =\"\";\r\n    errorMessage: string;\r\n    isLoading = false; \r\n\r\n    constructor(private service:RegistrationService, private router:Router, private http:HttpClient, private auth:AuthService) {}\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    loginUser(loginForm:NgForm) {\r\n       if(loginForm && loginForm.valid) {\r\n        const email = loginForm.form.value.email;\r\n        const password = loginForm.form.value.password;\r\n        this.auth.login()\r\n        this.service.loginUserfromRemote(this.user).subscribe(\r\n          data => {\r\n              console.log(\"response received\");\r\n              this.router.navigate(['/products'])\r\n          },\r\n          error => {\r\n              console.log(\"expection occured\");\r\n              this.msg=\"Please enter a valid credentials\"\r\n          })\r\n        }    \r\n      else {\r\n        this.msg = \"Please try again\"\r\n      }\r\n    \r\n        \r\n    }\r\n    \r\n    toggleLoading() {\r\n      this.isLoading = true;\r\n      this.auth.login()\r\n      \r\n        setTimeout(() => {\r\n          this.isLoading = false;\r\n        }, 10000)\r\n    }\r\n}","<section  class=\"login_section\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 col-sm-12\">\r\n                <div class=\"login_card\">\r\n                    <div class=\"login_logo_container\">\r\n                        <img src=\"../../assets/logo/logo.png\"  alt=\"sellIt_logo\"/>\r\n                    </div>\r\n                    <div class=\"login_header_container\">\r\n                        <div class=\"login_header__login\">\r\n                            <a>LogIn</a>\r\n                        </div>\r\n                        <div class=\"login_header__register\">\r\n                            <a href=\"user/register\" >Register</a>\r\n                        </div>     \r\n                    </div>\r\n                    <div class=\"\">\r\n                        <form  #loginForm=\"ngForm\" (ngSubmit)=\"loginUser(loginForm)\" \r\n                         autocomplete=\"off\">\r\n                            <small class=\"text-danger\">{{msg}}</small>\r\n                            <div class=\"login_input_container\">\r\n                                <!-- <em *ngIf=\"loginForm.controls.email?.invalid && (loginForm.controls.email?.touched || mouseoverLogin)\">Required</em> -->\r\n                                <input \r\n                                    name=\"email\"\r\n                                    [(ngModel)]=\"user.email\"\r\n                                    placeholder=\"Email address\"\r\n                                    type=\"email\"\r\n                                    required\r\n                                    pattern=\"^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$\"\r\n                                    #email=\"ngModel\"\r\n                                    [ngClass]=\"{'is-invalid': (email.touched || email.dirty) && !email.valid }\"\r\n                                    \r\n                                />\r\n                                <span class=\"invalid-feedback\">\r\n                                    <span *ngIf=\"email.hasError('required')\">\r\n                                      Email is required.\r\n                                    </span>\r\n                                    <span *ngIf=\"email.hasError('emailvalidator')\">\r\n                                      Please provide a valid email address\r\n                                    </span>\r\n                                  </span>\r\n                            </div>\r\n                            <div class=\"login_input_container\">\r\n                                <!-- <em *ngIf=\"loginForm.controls.password?.invalid && (loginForm.controls.password?.touched  || mouseoverLogin)\">Required</em> -->\r\n                                <input \r\n                                    name=\"password\"\r\n                                    [(ngModel)]=\"user.password\"\r\n                                    placeholder=\"Password\"\r\n                                    type=\"password\"\r\n                                    autocomplete=\"off\"\r\n                                    #password=\"ngModel\"\r\n                                    [ngClass]=\"{'is-invalid': (password.touched || password.dirty) && !password.valid }\" \r\n                                    \r\n                                />\r\n                                <span class=\"invalid-feedback\">\r\n                                    <span *ngIf=\"password.hasError('required')\">\r\n                                      Password is required.\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                            <div class=\"login_button\">\r\n                                <!-- <span (mouseenter)=\"mouseoverLogin=true\" (mouseleave)=\"mouseoverLogin=false\"> -->\r\n                                    <button type=\"submit\"  >\r\n                                        <img \r\n                                        *ngIf=\"isLoading\"\r\n                                         src=\"../../../assets/spinner/ajax.gif\" \r\n                                         style=\"width:24px\"\r\n                                        />\r\n                                        Login\r\n                                    </button>\r\n                            </div>\r\n                        </form>\r\n                        <div class=\"login_forgot-password\">\r\n                            <a href=\"\">Forgot Password?</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegistrationComponent } from './registration/register.component'\r\nimport {LoginComponent } from \"./login/login.component\"\r\nimport { RouteModule } from './route/route.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { PasswordPatternDirective } from './password.pattern';\r\nimport { MatchPasswordDirective } from './matchPassword';\r\n\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: \r\n    [LoginComponent, \r\n    RegistrationComponent,\r\n    PasswordPatternDirective,\r\n    MatchPasswordDirective\r\n  \r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouteModule,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class UserModule { }\r\n","import { Directive, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\r\nimport { CustomvalidationService } from './customValidation';\r\n\r\n@Directive({\r\n  selector: '[appMatchPassword]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: MatchPasswordDirective, multi: true }]\r\n})\r\nexport class MatchPasswordDirective implements Validator {\r\n  @Input('appMatchPassword') MatchPassword: string[] = [];\r\n\r\n  constructor(private customValidator: CustomvalidationService) { }\r\n\r\n  validate(formGroup: FormGroup): ValidationErrors {\r\n    return this.customValidator.MatchPassword(this.MatchPassword[0], this.MatchPassword[1])(formGroup);\r\n  }\r\n}","import { Directive } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\r\nimport { CustomvalidationService } from './customValidation';\r\n\r\n@Directive({\r\n  selector: '[appPasswordPattern]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: PasswordPatternDirective, multi: true }]\r\n})\r\nexport class PasswordPatternDirective implements Validator {\r\n\r\n  constructor(private customValidator: CustomvalidationService) { }\r\n\r\n  validate(control: AbstractControl): { [key: string]: any } | null {\r\n    return this.customValidator.patternValidator()(control);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomvalidationService {\r\n\r\n  patternValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        return null;\r\n      }\r\n      const regex = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$');\r\n      const valid = regex.test(control.value);\r\n      return valid ? null : { invalidPassword: true };\r\n    };\r\n  }\r\n\r\n  MatchPassword(password: string, confirmPassword: string) {\r\n    return (formGroup: FormGroup) => {\r\n      const passwordControl = formGroup.controls[password];\r\n      const confirmPasswordControl = formGroup.controls[confirmPassword];\r\n\r\n      if (!passwordControl || !confirmPasswordControl) {\r\n        return null;\r\n      }\r\n\r\n      if (confirmPasswordControl.errors && !confirmPasswordControl.errors.passwordMismatch) {\r\n        return null;\r\n      }\r\n\r\n      if (passwordControl.value !== confirmPasswordControl.value) {\r\n        confirmPasswordControl.setErrors({ passwordMismatch: true });\r\n      } else {\r\n        confirmPasswordControl.setErrors(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  userNameValidator(userControl: AbstractControl) {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        if (this.validateUserName(userControl.value)) {\r\n          resolve({ userNameNotAvailable: true });\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  validateUserName(userName: string) {\r\n    const UserList = ['ankit', 'admin', 'user', 'superuser'];\r\n    return (UserList.indexOf(userName) > -1);\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { RegistrationComponent } from '../registration/register.component'\r\n\r\nconst routes:Routes=[\r\n  {path:'login',component:LoginComponent},\r\n  {path:'register',component:RegistrationComponent}\r\n\r\n]\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports:[\r\n    RouterModule\r\n  ]\r\n})\r\nexport class RouteModule { }\r\n","import { Component } from '@angular/core'\r\nimport { HttpClient } from \"@angular/common/http\"\r\nimport { NgForm } from \"@angular/forms\"\r\nimport {RegistrationService} from \"../registration.service\"\r\nimport { IUSER } from '../user.model'\r\nimport { AuthService } from \"../auth.service\"\r\nimport { Router } from \"@angular/router\"\r\n\r\n@Component({\r\n    selector: \"register-app\",\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['../login/login.component.css', './registration.component.css']\r\n})\r\n\r\nexport class RegistrationComponent {\r\n    user = new IUSER();\r\n    msg =\"\";\r\n    isLoading = false;\r\n    constructor(private http:HttpClient, private service:RegistrationService, private router:Router) {}\r\n    onSubmit() {\r\n      alert('Form Submitted succesfully!!!\\n Check the values in browser console.');\r\n      console.table(this.user);\r\n    \r\n    }\r\n\r\n    toggleLoading() {\r\n      this.isLoading = true;\r\n      this.service.registerUserfromRemote(this.user).subscribe(\r\n        data => {\r\n          console.log(\"response received\");\r\n          this.msg =\"Registration successfull\"\r\n          this.router.navigate(['user/login'])\r\n      },\r\n      error => {\r\n        console.log(\"expection occured\");\r\n        this.msg=\"Please enter a valid credentials\";\r\n      }\r\n     )\r\n      setTimeout(() => {\r\n        this.isLoading = false;\r\n      }, 11000)\r\n    }\r\n  \r\n  \r\n  }\r\n\r\n","<section  class=\"register_section\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 col-sm-12\">\r\n                <div class=\"register_card\">\r\n                    <div class=\"login_logo_container\">\r\n                        <img src=\"../../assets/logo/logo.png\"  alt=\"sellIt_logo\"/>\r\n                    </div>\r\n                    <div class=\"login_header_container\">\r\n                        <div class=\"login_header__login\">\r\n                            <a>Register</a>\r\n                        </div>\r\n                        <div class=\"login_header__register\">\r\n                            <a href=\"user/login\"  >LogIn</a>\r\n                        </div>     \r\n                    </div>\r\n                    <div class=\"\">\r\n                        <form #registerForm=\"ngForm\" [appMatchPassword]=\"['password', 'confirmPassword']\"\r\n                        (ngSubmit)=\"registerForm.form.valid && onSubmit()\" novalidate>\r\n                            <small class=\"text-danger\">{{msg}}</small>\r\n                            <div class=\"login_input_container\">\r\n                                <input \r\n                                    placeholder=\"First Name\" \r\n                                    name=\"firstname\"\r\n                                    type=\"text\" \r\n                                    [(ngModel)]=\"user.firstname\"\r\n                                    #name=\"ngModel\" \r\n                                    required\r\n                                />\r\n                                <span class=\"text-danger\"\r\n                                    *ngIf=\"(name.touched || registerForm.submitted) && name.errors?.required\">\r\n                                    First Name is required\r\n                                </span>\r\n                            </div>\r\n                            <div class=\"login_input_container\">\r\n                                <input \r\n                                    placeholder=\"Last Name\" \r\n                                    name=\"lastname\"\r\n                                    type=\"text\" \r\n                                    [(ngModel)]=\"user.lastname\"\r\n                                    #lname=\"ngModel\"\r\n                                    required\r\n                                />\r\n                                <span class=\"text-danger\"\r\n                                    *ngIf=\"(lname.touched || registerForm.submitted) && lname.errors?.required\">\r\n                                    Last Name is required\r\n                                </span>\r\n                            </div>\r\n                            <div class=\"login_input_container\">\r\n                                <input \r\n                                    placeholder=\"Phone No\" \r\n                                    name=\"phone\"\r\n                                    type=\"phone\" \r\n                                    id=\"phone\" \r\n                                    [(ngModel)]=\"user.phone\"\r\n                                    required\r\n                                    \r\n                                />\r\n                            </div>\r\n                            <div class=\"login_input_container\">\r\n                                <input \r\n                                    placeholder=\"Email address\" \r\n                                    name=\"email\"\r\n                                    type=\"email\" \r\n                                    [(ngModel)]=\"user.email\"\r\n                                    #email=\"ngModel\"\r\n                                    required email\r\n                                />\r\n                                <span class=\"text-danger\"\r\n                                    *ngIf=\"(email.touched || registerForm.submitted) && email.errors?.required\">\r\n                                    Email is required\r\n                                </span>\r\n                                <span class=\"text-danger\" *ngIf=\"email.touched && email.errors?.email\">\r\n                                    Enter a valid email address\r\n                                </span>\r\n                            </div>\r\n                            <div class=\"login_input_container\">\r\n                                <input \r\n                                    placeholder=\"Password\" \r\n                                    name=\"password\"\r\n                                    type=\"password\" \r\n                                    [(ngModel)]=\"user.password\"\r\n                                    required\r\n                                    #password=\"ngModel\" \r\n                                    appPasswordPattern required\r\n                                />\r\n                                <span class=\"text-danger\"\r\n                                    *ngIf=\"(password.touched || registerForm.submitted) && password.errors?.required\">\r\n                                    Password is required\r\n                                </span>\r\n                                <span class=\"text-danger\" *ngIf=\"password.touched && password.errors?.invalidPassword\">\r\n                                    Password should have minimum 8 characters, at least 1 uppercase letter, 1 lowercase\r\n                                    letter and 1 number\r\n                                </span>\r\n                            </div>\r\n                            <!-- <div class=\"login_input_container\">\r\n                                <input \r\n                                    placeholder=\"Password\" \r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\" \r\n                                    [(ngModel)]=\"user.confirmPassword\"\r\n                                    required\r\n                                    #confirmPassword=\"ngModel\" \r\n                                    appPasswordPattern \r\n                                    required\r\n                                />\r\n                                <span class=\"text-danger\"\r\n                                    *ngIf=\"(confirmPassword.touched || registerForm.submitted) && confirmPassword.errors?.required\">\r\n                                    Confirm Password is required\r\n                                </span>\r\n                                <span class=\"text-danger\"\r\n                                    *ngIf=\"confirmPassword.touched && confirmPassword.errors?.passwordMismatch\">\r\n                                    Passwords doesnot match\r\n                                </span>\r\n                            </div> -->\r\n                            <div class=\"login_button\">\r\n                                <button type=\"submit\" (click)=\"toggleLoading()\" [disabled] =\"isLoading\" >\r\n                                    <img \r\n                                    *ngIf=\"isLoading\"\r\n                                     src=\"../../../assets/spinner/ajax.gif\" \r\n                                     style=\"width:24px\"\r\n                                    />\r\n                                    Register\r\n\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>"],"sourceRoot":"webpack:///"}